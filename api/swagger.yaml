openapi: "3.0.0"
info:
  version: 0.0.1
  title: Campus Vault API
  description: Backend API for Campus Vault Frontend
servers:
  - url: http://localhost:8080
    description: Local Server
components:
  schemas:
    UUID:
      type: string
      format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"

    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        email:
          type: string
          format: email
        role:
          $ref: "#/components/schemas/UserRole"
      required:
        - id
        - email
        - role

    UserRole:
      type: string
      enum:
        - admin
        - approver
        - group_admin
        - member

    ItemType:
      type: string
      enum:
        - low
        - medium
        - high

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
      required:
        - code
        - message

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@torontomu.ca"
      required:
        - email
    LoginResponse:
      type: object
      properties:
        token:
          type: string

    PingResponse:
      type: object
      properties:
        message:
          type: string
          example: "pong"
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - message
        - timestamp
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ""
          scopes:
            manage_items: "Create, update, and delete items globally"
            manage_groups: "Create, update, and delete groups"
            manage_users: "Create, update, and delete users globally"
            manage_group_users: "Add/remove users from specific group"
            approve_all_requests: "Approve/deny requests across all groups"
            view_group_data: "View requests/borrowings within specific group"
            view_all_data: "View requests/borrowings across all groups"
            manage_time_slots: "Create and manage available time slots"
            manage_all_bookings: "Manage booking schedules globally"
            manage_group_bookings: "Manage booking schedules for specific group"
            view_items: "View item catalog"
            manage_cart: "Add/remove items from cart"
            request_items: "Submit requests for borrowing items"
            view_own_data: "View own requests and borrowings"
security:
  - BearerAuth: []
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      security: []
      summary: Login User
      description: Authenticates a user, returns a bearer token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 400
                message: "Invalid email or password."
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 500
                message: "An unexpected error occurred."

  /ping:
    get:
      tags:
        - Protected
      summary: Protected ping endpoint
      description: Simple protected endpoint to test authentication
      operationId: pingProtected
      security:
        - BearerAuth: []
        - OAuth2: [view_own_data]
      responses:
        "200":
          description: Successful ping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 401
                message: "Credentials Invalid or Not Provided"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 500
                message: "An unexpected error occurred."

  /items:
    get:
      tags:
        - Items
      summary: Get all items
      description: Retrieve all items from the catalog
      operationId: getItems
      security:
        - BearerAuth: [ ]
        - OAuth2: [ view_items ]
      responses:
        "200":
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/UUID"
                    name:
                      type: string
                    description:
                      type: string
                    type:
                      $ref: "#/components/schemas/ItemType"
                    stock:
                      type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - Items
      summary: Create an item
      description: Add a new item to the catalog
      operationId: createItem
      security:
        - BearerAuth: [ ]
        - OAuth2: [ manage_items ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  $ref: "#/components/schemas/ItemType"
                stock:
                  type: integer
              required:
                - name
                - type
                - stock
      responses:
        "201":
          description: Item created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/UUID"
                  name:
                    type: string
                  description:
                    type: string
                  type:
                    $ref: "#/components/schemas/ItemType"
                  stock:
                    type: integer
        "400":
          description: Bad Request - invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items/type/{type}:
    get:
      tags:
        - Items
      summary: Get items by type
      description: Retrieve items filtered by type
      operationId: getItemsByType
      security:
        - BearerAuth: [ ]
        - OAuth2: [ view_items ]
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ItemType"
      responses:
        "200":
          description: List of items by type
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/UUID"
                    name:
                      type: string
                    description:
                      type: string
                    type:
                      $ref: "#/components/schemas/ItemType"
                    stock:
                      type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /items/{id}:
    get:
      tags:
        - Items
      summary: Get item by ID
      description: Retrieve a single item by its ID
      operationId: getItemById
      security:
        - BearerAuth: [ ]
        - OAuth2: [ view_items ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Item details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/UUID"
                  name:
                    type: string
                  description:
                    type: string
                  type:
                    $ref: "#/components/schemas/ItemType"
                  stock:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags:
        - Items
      summary: Update item
      description: Update an existing item
      operationId: updateItem
      security:
        - BearerAuth: [ ]
        - OAuth2: [ manage_items ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                type:
                  $ref: "#/components/schemas/ItemType"
                stock:
                  type: integer
              required:
                - name
                - type
                - stock
      responses:
        "200":
          description: Item updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/UUID"
                  name:
                    type: string
                  description:
                    type: string
                  type:
                    $ref: "#/components/schemas/ItemType"
                  stock:
                    type: integer
        "400":
          description: Bad Request - invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - Items
      summary: Delete item
      description: Delete an item by its ID
      operationId: deleteItem
      security:
        - BearerAuth: [ ]
        - OAuth2: [ manage_items ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: Item deleted
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users (admin only)
      description: Retrieve all users - requires admin permissions
      operationId: getUsers
      security:
        - BearerAuth: []
        - OAuth2: [manage_users]
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/invite:
    post:
      tags:
        - Admin
      summary: Invite user (admin only)
      description: Invite a new user to the system - requires global or group admin permissions
      operationId: inviteUser
      security:
        - BearerAuth: [ ]
        - OAuth2: [ manage_users ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "president@usstm.ca"
                role_name:
                  type: string
                  example: "group_admin"
                scope:
                  type: string
                  enum: [ global, group ]
                  example: "group"
                scope_id:
                  $ref: "#/components/schemas/UUID"
              required:
                - email
                - role_name
                - scope
      responses:
        "201":
          description: Invitation code created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
