// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Condition string

const (
	ConditionUnusable Condition = "unusable"
	ConditionDamaged  Condition = "damaged"
	ConditionDecent   Condition = "decent"
	ConditionGood     Condition = "good"
	ConditionPristine Condition = "pristine"
)

func (e *Condition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Condition(s)
	case string:
		*e = Condition(s)
	default:
		return fmt.Errorf("unsupported scan type for Condition: %T", src)
	}
	return nil
}

type NullCondition struct {
	Condition Condition `json:"condition"`
	Valid     bool      `json:"valid"` // Valid is true if Condition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCondition) Scan(value interface{}) error {
	if value == nil {
		ns.Condition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Condition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCondition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Condition), nil
}

type ConditionType string

const (
	ConditionTypeFile  ConditionType = "file"
	ConditionTypeImage ConditionType = "image"
)

func (e *ConditionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConditionType(s)
	case string:
		*e = ConditionType(s)
	default:
		return fmt.Errorf("unsupported scan type for ConditionType: %T", src)
	}
	return nil
}

type NullConditionType struct {
	ConditionType ConditionType `json:"condition_type"`
	Valid         bool          `json:"valid"` // Valid is true if ConditionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConditionType) Scan(value interface{}) error {
	if value == nil {
		ns.ConditionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConditionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConditionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConditionType), nil
}

type GroupRole string

const (
	GroupRoleManage GroupRole = "manage"
	GroupRoleMember GroupRole = "member"
)

func (e *GroupRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GroupRole(s)
	case string:
		*e = GroupRole(s)
	default:
		return fmt.Errorf("unsupported scan type for GroupRole: %T", src)
	}
	return nil
}

type NullGroupRole struct {
	GroupRole GroupRole `json:"group_role"`
	Valid     bool      `json:"valid"` // Valid is true if GroupRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGroupRole) Scan(value interface{}) error {
	if value == nil {
		ns.GroupRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GroupRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGroupRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GroupRole), nil
}

type ItemType string

const (
	ItemTypeLow    ItemType = "low"
	ItemTypeMedium ItemType = "medium"
	ItemTypeHigh   ItemType = "high"
)

func (e *ItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemType(s)
	case string:
		*e = ItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemType: %T", src)
	}
	return nil
}

type NullItemType struct {
	ItemType ItemType `json:"item_type"`
	Valid    bool     `json:"valid"` // Valid is true if ItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemType) Scan(value interface{}) error {
	if value == nil {
		ns.ItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemType), nil
}

type RequestStatus string

const (
	RequestStatusPending  RequestStatus = "pending"
	RequestStatusApproved RequestStatus = "approved"
	RequestStatusDenied   RequestStatus = "denied"
)

func (e *RequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestStatus(s)
	case string:
		*e = RequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestStatus: %T", src)
	}
	return nil
}

type NullRequestStatus struct {
	RequestStatus RequestStatus `json:"request_status"`
	Valid         bool          `json:"valid"` // Valid is true if RequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RequestStatus), nil
}

type UserAction string

const (
	UserActionBorrow   UserAction = "borrow"
	UserActionReturn   UserAction = "return"
	UserActionRequest  UserAction = "request"
	UserActionRejected UserAction = "rejected"
	UserActionApproved UserAction = "approved"
)

func (e *UserAction) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserAction(s)
	case string:
		*e = UserAction(s)
	default:
		return fmt.Errorf("unsupported scan type for UserAction: %T", src)
	}
	return nil
}

type NullUserAction struct {
	UserAction UserAction `json:"user_action"`
	Valid      bool       `json:"valid"` // Valid is true if UserAction is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserAction) Scan(value interface{}) error {
	if value == nil {
		ns.UserAction, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserAction.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserAction) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserAction), nil
}

type UserRole string

const (
	UserRoleAdmin        UserRole = "admin"
	UserRoleOrganization UserRole = "organization"
	UserRoleMember       UserRole = "member"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type AuditLog struct {
	ID          pgtype.UUID      `json:"id"`
	ItemID      pgtype.UUID      `json:"item_id"`
	UserID      pgtype.UUID      `json:"user_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	Status      UserAction       `json:"status"`
	Date        pgtype.Timestamp `json:"date"`
	DateTo      pgtype.Timestamp `json:"date_to"`
	ConditionID pgtype.UUID      `json:"condition_id"`
	ApproverID  pgtype.UUID      `json:"approver_id"`
	Notes       pgtype.Text      `json:"notes"`
}

type Booking struct {
	ID             pgtype.UUID      `json:"id"`
	RequesterID    pgtype.UUID      `json:"requester_id"`
	ManagerID      pgtype.UUID      `json:"manager_id"`
	ItemID         pgtype.UUID      `json:"item_id"`
	AvailabilityID pgtype.UUID      `json:"availability_id"`
	ConfirmedBy    pgtype.UUID      `json:"confirmed_by"`
	PickUpDate     pgtype.Timestamp `json:"pick_up_date"`
	PickUpLocation string           `json:"pick_up_location"`
	ReturnDate     pgtype.Timestamp `json:"return_date"`
	ReturnLocation string           `json:"return_location"`
	Status         RequestStatus    `json:"status"`
}

type Borrowed struct {
	ID          pgtype.UUID      `json:"id"`
	ItemID      pgtype.UUID      `json:"item_id"`
	UserID      pgtype.UUID      `json:"user_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	Status      UserAction       `json:"status"`
	Date        pgtype.Timestamp `json:"date"`
	DateTo      pgtype.Timestamp `json:"date_to"`
	ConditionID pgtype.UUID      `json:"condition_id"`
	ApproverID  pgtype.UUID      `json:"approver_id"`
	Notes       pgtype.Text      `json:"notes"`
}

type Cart struct {
	GroupID   pgtype.UUID      `json:"group_id"`
	UserID    pgtype.UUID      `json:"user_id"`
	ItemID    pgtype.UUID      `json:"item_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	Quantity  int32            `json:"quantity"`
}

type HighItemRequest struct {
	ID          pgtype.UUID      `json:"id"`
	ItemID      pgtype.UUID      `json:"item_id"`
	UserID      pgtype.UUID      `json:"user_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	Status      UserAction       `json:"status"`
	Date        pgtype.Timestamp `json:"date"`
	DateTo      pgtype.Timestamp `json:"date_to"`
	ConditionID pgtype.UUID      `json:"condition_id"`
	ApproverID  pgtype.UUID      `json:"approver_id"`
	Notes       pgtype.Text      `json:"notes"`
	ItemName    string           `json:"item_name"`
	Type        ItemType         `json:"type"`
}

type Item struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Type        ItemType    `json:"type"`
	Stock       int32       `json:"stock"`
	Urls        []string    `json:"urls"`
}

type ItemCondition struct {
	ID             pgtype.UUID      `json:"id"`
	Before         Condition        `json:"before"`
	After          NullCondition    `json:"after"`
	BeforeImageUrl string           `json:"before_image_url"`
	AfterImageUrl  pgtype.Text      `json:"after_image_url"`
	Type           ConditionType    `json:"type"`
	AuditLogID     pgtype.UUID      `json:"audit_log_id"`
	RecordedAt     pgtype.Timestamp `json:"recorded_at"`
}

type Rejected struct {
	ID          pgtype.UUID      `json:"id"`
	ItemID      pgtype.UUID      `json:"item_id"`
	UserID      pgtype.UUID      `json:"user_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	Status      UserAction       `json:"status"`
	Date        pgtype.Timestamp `json:"date"`
	DateTo      pgtype.Timestamp `json:"date_to"`
	ConditionID pgtype.UUID      `json:"condition_id"`
	ApproverID  pgtype.UUID      `json:"approver_id"`
	Notes       pgtype.Text      `json:"notes"`
}

type Requested struct {
	ID          pgtype.UUID      `json:"id"`
	ItemID      pgtype.UUID      `json:"item_id"`
	UserID      pgtype.UUID      `json:"user_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	Status      UserAction       `json:"status"`
	Date        pgtype.Timestamp `json:"date"`
	DateTo      pgtype.Timestamp `json:"date_to"`
	ConditionID pgtype.UUID      `json:"condition_id"`
	ApproverID  pgtype.UUID      `json:"approver_id"`
	Notes       pgtype.Text      `json:"notes"`
}

type Returned struct {
	ID          pgtype.UUID      `json:"id"`
	ItemID      pgtype.UUID      `json:"item_id"`
	UserID      pgtype.UUID      `json:"user_id"`
	GroupID     pgtype.UUID      `json:"group_id"`
	Status      UserAction       `json:"status"`
	Date        pgtype.Timestamp `json:"date"`
	DateTo      pgtype.Timestamp `json:"date_to"`
	ConditionID pgtype.UUID      `json:"condition_id"`
	ApproverID  pgtype.UUID      `json:"approver_id"`
	Notes       pgtype.Text      `json:"notes"`
}

type StudentGroup struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

type TimeSlot struct {
	ID        pgtype.UUID      `json:"id"`
	StartTime pgtype.Timestamp `json:"start_time"`
	EndTime   pgtype.Timestamp `json:"end_time"`
}

type User struct {
	ID           pgtype.UUID `json:"id"`
	Email        string      `json:"email"`
	PasswordHash pgtype.Text `json:"password_hash"`
	Role         UserRole    `json:"role"`
}

type UserAvailability struct {
	ID         pgtype.UUID `json:"id"`
	UserID     pgtype.UUID `json:"user_id"`
	GroupID    pgtype.UUID `json:"group_id"`
	TimeSlotID pgtype.UUID `json:"time_slot_id"`
	Date       pgtype.Date `json:"date"`
}

type UserGroup struct {
	UserID  pgtype.UUID `json:"user_id"`
	GroupID pgtype.UUID `json:"group_id"`
	Role    GroupRole   `json:"role"`
}
