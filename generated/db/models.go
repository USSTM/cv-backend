// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Condition string

const (
	ConditionUnusable Condition = "unusable"
	ConditionDamaged  Condition = "damaged"
	ConditionDecent   Condition = "decent"
	ConditionGood     Condition = "good"
	ConditionPristine Condition = "pristine"
)

func (e *Condition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Condition(s)
	case string:
		*e = Condition(s)
	default:
		return fmt.Errorf("unsupported scan type for Condition: %T", src)
	}
	return nil
}

type NullCondition struct {
	Condition Condition `json:"condition"`
	Valid     bool      `json:"valid"` // Valid is true if Condition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCondition) Scan(value interface{}) error {
	if value == nil {
		ns.Condition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Condition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCondition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Condition), nil
}

type ItemType string

const (
	ItemTypeLow    ItemType = "low"
	ItemTypeMedium ItemType = "medium"
	ItemTypeHigh   ItemType = "high"
)

func (e *ItemType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemType(s)
	case string:
		*e = ItemType(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemType: %T", src)
	}
	return nil
}

type NullItemType struct {
	ItemType ItemType `json:"item_type"`
	Valid    bool     `json:"valid"` // Valid is true if ItemType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemType) Scan(value interface{}) error {
	if value == nil {
		ns.ItemType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemType), nil
}

type RequestStatus string

const (
	RequestStatusPending  RequestStatus = "pending"
	RequestStatusApproved RequestStatus = "approved"
	RequestStatusDenied   RequestStatus = "denied"
)

func (e *RequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestStatus(s)
	case string:
		*e = RequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestStatus: %T", src)
	}
	return nil
}

type NullRequestStatus struct {
	RequestStatus RequestStatus `json:"request_status"`
	Valid         bool          `json:"valid"` // Valid is true if RequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RequestStatus), nil
}

type ScopeType string

const (
	ScopeTypeGlobal ScopeType = "global"
	ScopeTypeGroup  ScopeType = "group"
)

func (e *ScopeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScopeType(s)
	case string:
		*e = ScopeType(s)
	default:
		return fmt.Errorf("unsupported scan type for ScopeType: %T", src)
	}
	return nil
}

type NullScopeType struct {
	ScopeType ScopeType `json:"scope_type"`
	Valid     bool      `json:"valid"` // Valid is true if ScopeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScopeType) Scan(value interface{}) error {
	if value == nil {
		ns.ScopeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScopeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScopeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScopeType), nil
}

type Booking struct {
	ID             uuid.UUID        `json:"id"`
	RequesterID    *uuid.UUID       `json:"requester_id"`
	ManagerID      *uuid.UUID       `json:"manager_id"`
	ItemID         *uuid.UUID       `json:"item_id"`
	AvailabilityID *uuid.UUID       `json:"availability_id"`
	ConfirmedBy    *uuid.UUID       `json:"confirmed_by"`
	PickUpDate     pgtype.Timestamp `json:"pick_up_date"`
	PickUpLocation string           `json:"pick_up_location"`
	ReturnDate     pgtype.Timestamp `json:"return_date"`
	ReturnLocation string           `json:"return_location"`
	Status         RequestStatus    `json:"status"`
}

type Borrowing struct {
	ID                 uuid.UUID        `json:"id"`
	UserID             *uuid.UUID       `json:"user_id"`
	GroupID            *uuid.UUID       `json:"group_id"`
	ItemID             *uuid.UUID       `json:"item_id"`
	Quantity           int32            `json:"quantity"`
	BorrowedAt         pgtype.Timestamp `json:"borrowed_at"`
	DueDate            pgtype.Timestamp `json:"due_date"`
	ReturnedAt         pgtype.Timestamp `json:"returned_at"`
	BeforeCondition    Condition        `json:"before_condition"`
	BeforeConditionUrl string           `json:"before_condition_url"`
	AfterCondition     NullCondition    `json:"after_condition"`
	AfterConditionUrl  pgtype.Text      `json:"after_condition_url"`
}

type Cart struct {
	GroupID   uuid.UUID        `json:"group_id"`
	UserID    uuid.UUID        `json:"user_id"`
	ItemID    uuid.UUID        `json:"item_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	Quantity  int32            `json:"quantity"`
}

type Group struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

type Item struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Type        ItemType    `json:"type"`
	Stock       int32       `json:"stock"`
	Urls        []string    `json:"urls"`
}

type Permission struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

type Request struct {
	ID          uuid.UUID         `json:"id"`
	UserID      *uuid.UUID        `json:"user_id"`
	GroupID     *uuid.UUID        `json:"group_id"`
	ItemID      *uuid.UUID        `json:"item_id"`
	Quantity    int32             `json:"quantity"`
	Status      NullRequestStatus `json:"status"`
	RequestedAt pgtype.Timestamp  `json:"requested_at"`
	ReviewedBy  *uuid.UUID        `json:"reviewed_by"`
	ReviewedAt  pgtype.Timestamp  `json:"reviewed_at"`
}

type Role struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

type RolePermission struct {
	RoleName       string `json:"role_name"`
	PermissionName string `json:"permission_name"`
}

type SignupCode struct {
	ID        uuid.UUID        `json:"id"`
	Code      string           `json:"code"`
	Email     string           `json:"email"`
	RoleName  string           `json:"role_name"`
	Scope     ScopeType        `json:"scope"`
	ScopeID   *uuid.UUID       `json:"scope_id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UsedAt    pgtype.Timestamp `json:"used_at"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	CreatedBy uuid.UUID        `json:"created_by"`
}

type TimeSlot struct {
	ID        uuid.UUID        `json:"id"`
	StartTime pgtype.Timestamp `json:"start_time"`
	EndTime   pgtype.Timestamp `json:"end_time"`
}

type User struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

type UserAvailability struct {
	ID         uuid.UUID   `json:"id"`
	UserID     *uuid.UUID  `json:"user_id"`
	GroupID    *uuid.UUID  `json:"group_id"`
	TimeSlotID *uuid.UUID  `json:"time_slot_id"`
	Date       pgtype.Date `json:"date"`
}

type UserRole struct {
	UserID   *uuid.UUID  `json:"user_id"`
	RoleName pgtype.Text `json:"role_name"`
	Scope    ScopeType   `json:"scope"`
	ScopeID  *uuid.UUID  `json:"scope_id"`
}
