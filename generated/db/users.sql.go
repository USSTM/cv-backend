// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSignUpCode = `-- name: CreateSignUpCode :one
INSERT INTO signup_codes (id, code, email, role_name, scope, scope_id, created_at, used_at, expires_at, created_by)
VALUES (gen_random_uuid(), $1, $2, $3, $4, $5, NOW(), NULL, NOW() + INTERVAL '7 days', $6)
    RETURNING id, code, email, role_name, scope, scope_id, created_at, used_at, expires_at, created_by
`

type CreateSignUpCodeParams struct {
	Code      string     `json:"code"`
	Email     string     `json:"email"`
	RoleName  string     `json:"role_name"`
	Scope     ScopeType  `json:"scope"`
	ScopeID   *uuid.UUID `json:"scope_id"`
	CreatedBy uuid.UUID  `json:"created_by"`
}

func (q *Queries) CreateSignUpCode(ctx context.Context, arg CreateSignUpCodeParams) (SignupCode, error) {
	row := q.db.QueryRow(ctx, createSignUpCode,
		arg.Code,
		arg.Email,
		arg.RoleName,
		arg.Scope,
		arg.ScopeID,
		arg.CreatedBy,
	)
	var i SignupCode
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Email,
		&i.RoleName,
		&i.Scope,
		&i.ScopeID,
		&i.CreatedAt,
		&i.UsedAt,
		&i.ExpiresAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email from users
`

type GetAllUsersRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByGroup = `-- name: GetUsersByGroup :many
SELECT u.id, u.email, ur.role_name, ur.scope, ur.scope_id
FROM users u
JOIN user_roles ur on u.id = ur.user_id
WHERE ur.scope = 'group' AND ur.scope_id = $1
`

type GetUsersByGroupRow struct {
	ID       uuid.UUID   `json:"id"`
	Email    string      `json:"email"`
	RoleName pgtype.Text `json:"role_name"`
	Scope    ScopeType   `json:"scope"`
	ScopeID  *uuid.UUID  `json:"scope_id"`
}

func (q *Queries) GetUsersByGroup(ctx context.Context, scopeID *uuid.UUID) ([]GetUsersByGroupRow, error) {
	rows, err := q.db.Query(ctx, getUsersByGroup, scopeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByGroupRow{}
	for rows.Next() {
		var i GetUsersByGroupRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.RoleName,
			&i.Scope,
			&i.ScopeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
