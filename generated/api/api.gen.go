// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	OAuth2Scopes     = "OAuth2.Scopes"
)

// Defines values for ItemType.
const (
	High   ItemType = "high"
	Low    ItemType = "low"
	Medium ItemType = "medium"
)

// Defines values for UserRole.
const (
	Admin      UserRole = "admin"
	Approver   UserRole = "approver"
	GroupAdmin UserRole = "group_admin"
	Member     UserRole = "member"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// ItemType defines model for ItemType.
type ItemType string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email openapi_types.Email `json:"email"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// PingResponse defines model for PingResponse.
type PingResponse struct {
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// User defines model for User.
type User struct {
	Email openapi_types.Email `json:"email"`
	Id    UUID                `json:"id"`
	Role  UserRole            `json:"role"`
}

// UserRole defines model for UserRole.
type UserRole string

// CreateItemJSONBody defines parameters for CreateItem.
type CreateItemJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Stock       int      `json:"stock"`
	Type        ItemType `json:"type"`
}

// UpdateItemJSONBody defines parameters for UpdateItem.
type UpdateItemJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Stock       int      `json:"stock"`
	Type        ItemType `json:"type"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody CreateItemJSONBody

// UpdateItemJSONRequestBody defines body for UpdateItem for application/json ContentType.
type UpdateItemJSONRequestBody UpdateItemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users (admin only)
	// (GET /admin/users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Login User
	// (POST /auth/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Get all items
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request)
	// Create an item
	// (POST /items)
	CreateItem(w http.ResponseWriter, r *http.Request)
	// Get items by type
	// (GET /items/type/{type})
	GetItemsByType(w http.ResponseWriter, r *http.Request, pType ItemType)
	// Delete item
	// (DELETE /items/{id})
	DeleteItem(w http.ResponseWriter, r *http.Request, id UUID)
	// Get item by ID
	// (GET /items/{id})
	GetItemById(w http.ResponseWriter, r *http.Request, id UUID)
	// Update item
	// (PUT /items/{id})
	UpdateItem(w http.ResponseWriter, r *http.Request, id UUID)
	// Protected ping endpoint
	// (GET /ping)
	PingProtected(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all users (admin only)
// (GET /admin/users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Login User
// (POST /auth/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /items)
func (_ Unimplemented) GetItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an item
// (POST /items)
func (_ Unimplemented) CreateItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get items by type
// (GET /items/type/{type})
func (_ Unimplemented) GetItemsByType(w http.ResponseWriter, r *http.Request, pType ItemType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete item
// (DELETE /items/{id})
func (_ Unimplemented) DeleteItem(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item by ID
// (GET /items/{id})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update item
// (PUT /items/{id})
func (_ Unimplemented) UpdateItem(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Protected ping endpoint
// (GET /ping)
func (_ Unimplemented) PingProtected(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_users"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateItem operation middleware
func (siw *ServerInterfaceWrapper) CreateItem(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemsByType operation middleware
func (siw *ServerInterfaceWrapper) GetItemsByType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType ItemType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemsByType(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PingProtected operation middleware
func (siw *ServerInterfaceWrapper) PingProtected(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_own_data"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PingProtected(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.CreateItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/type/{type}", wrapper.GetItemsByType)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{id}", wrapper.DeleteItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/items/{id}", wrapper.UpdateItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.PingProtected)
	})

	return r
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []User

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers403JSONResponse Error

func (response GetUsers403JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse Error

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse LoginResponse

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser400JSONResponse Error

func (response LoginUser400JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser500JSONResponse Error

func (response LoginUser500JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsRequestObject struct {
}

type GetItemsResponseObject interface {
	VisitGetItemsResponse(w http.ResponseWriter) error
}

type GetItems200JSONResponse []struct {
	Description *string   `json:"description,omitempty"`
	Id          *UUID     `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Stock       *int      `json:"stock,omitempty"`
	Type        *ItemType `json:"type,omitempty"`
}

func (response GetItems200JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItems401JSONResponse Error

func (response GetItems401JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItems403JSONResponse Error

func (response GetItems403JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetItems500JSONResponse Error

func (response GetItems500JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateItemRequestObject struct {
	Body *CreateItemJSONRequestBody
}

type CreateItemResponseObject interface {
	VisitCreateItemResponse(w http.ResponseWriter) error
}

type CreateItem201JSONResponse struct {
	Description *string   `json:"description,omitempty"`
	Id          *UUID     `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Stock       *int      `json:"stock,omitempty"`
	Type        *ItemType `json:"type,omitempty"`
}

func (response CreateItem201JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem400JSONResponse Error

func (response CreateItem400JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem401JSONResponse Error

func (response CreateItem401JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem403JSONResponse Error

func (response CreateItem403JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem500JSONResponse Error

func (response CreateItem500JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByTypeRequestObject struct {
	Type ItemType `json:"type"`
}

type GetItemsByTypeResponseObject interface {
	VisitGetItemsByTypeResponse(w http.ResponseWriter) error
}

type GetItemsByType200JSONResponse []struct {
	Description *string   `json:"description,omitempty"`
	Id          *UUID     `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Stock       *int      `json:"stock,omitempty"`
	Type        *ItemType `json:"type,omitempty"`
}

func (response GetItemsByType200JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType401JSONResponse Error

func (response GetItemsByType401JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType403JSONResponse Error

func (response GetItemsByType403JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType404JSONResponse Error

func (response GetItemsByType404JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType500JSONResponse Error

func (response GetItemsByType500JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItemRequestObject struct {
	Id UUID `json:"id"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem401JSONResponse Error

func (response DeleteItem401JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem403JSONResponse Error

func (response DeleteItem403JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem404JSONResponse Error

func (response DeleteItem404JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem500JSONResponse Error

func (response DeleteItem500JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemByIdRequestObject struct {
	Id UUID `json:"id"`
}

type GetItemByIdResponseObject interface {
	VisitGetItemByIdResponse(w http.ResponseWriter) error
}

type GetItemById200JSONResponse struct {
	Description *string   `json:"description,omitempty"`
	Id          *UUID     `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Stock       *int      `json:"stock,omitempty"`
	Type        *ItemType `json:"type,omitempty"`
}

func (response GetItemById200JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById401JSONResponse Error

func (response GetItemById401JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById403JSONResponse Error

func (response GetItemById403JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById404JSONResponse Error

func (response GetItemById404JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById500JSONResponse Error

func (response GetItemById500JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItemRequestObject struct {
	Id   UUID `json:"id"`
	Body *UpdateItemJSONRequestBody
}

type UpdateItemResponseObject interface {
	VisitUpdateItemResponse(w http.ResponseWriter) error
}

type UpdateItem200JSONResponse struct {
	Description *string   `json:"description,omitempty"`
	Id          *UUID     `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Stock       *int      `json:"stock,omitempty"`
	Type        *ItemType `json:"type,omitempty"`
}

func (response UpdateItem200JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem400JSONResponse Error

func (response UpdateItem400JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem401JSONResponse Error

func (response UpdateItem401JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem403JSONResponse Error

func (response UpdateItem403JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem404JSONResponse Error

func (response UpdateItem404JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem500JSONResponse Error

func (response UpdateItem500JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingProtectedRequestObject struct {
}

type PingProtectedResponseObject interface {
	VisitPingProtectedResponse(w http.ResponseWriter) error
}

type PingProtected200JSONResponse PingResponse

func (response PingProtected200JSONResponse) VisitPingProtectedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PingProtected401JSONResponse Error

func (response PingProtected401JSONResponse) VisitPingProtectedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PingProtected500JSONResponse Error

func (response PingProtected500JSONResponse) VisitPingProtectedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all users (admin only)
	// (GET /admin/users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Login User
	// (POST /auth/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Get all items
	// (GET /items)
	GetItems(ctx context.Context, request GetItemsRequestObject) (GetItemsResponseObject, error)
	// Create an item
	// (POST /items)
	CreateItem(ctx context.Context, request CreateItemRequestObject) (CreateItemResponseObject, error)
	// Get items by type
	// (GET /items/type/{type})
	GetItemsByType(ctx context.Context, request GetItemsByTypeRequestObject) (GetItemsByTypeResponseObject, error)
	// Delete item
	// (DELETE /items/{id})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)
	// Get item by ID
	// (GET /items/{id})
	GetItemById(ctx context.Context, request GetItemByIdRequestObject) (GetItemByIdResponseObject, error)
	// Update item
	// (PUT /items/{id})
	UpdateItem(ctx context.Context, request UpdateItemRequestObject) (UpdateItemResponseObject, error)
	// Protected ping endpoint
	// (GET /ping)
	PingProtected(ctx context.Context, request PingProtectedRequestObject) (PingProtectedResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	var request GetUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItems operation middleware
func (sh *strictHandler) GetItems(w http.ResponseWriter, r *http.Request) {
	var request GetItemsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItems(ctx, request.(GetItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemsResponseObject); ok {
		if err := validResponse.VisitGetItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateItem operation middleware
func (sh *strictHandler) CreateItem(w http.ResponseWriter, r *http.Request) {
	var request CreateItemRequestObject

	var body CreateItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateItem(ctx, request.(CreateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateItemResponseObject); ok {
		if err := validResponse.VisitCreateItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItemsByType operation middleware
func (sh *strictHandler) GetItemsByType(w http.ResponseWriter, r *http.Request, pType ItemType) {
	var request GetItemsByTypeRequestObject

	request.Type = pType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemsByType(ctx, request.(GetItemsByTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemsByType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemsByTypeResponseObject); ok {
		if err := validResponse.VisitGetItemsByTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(w http.ResponseWriter, r *http.Request, id UUID) {
	var request DeleteItemRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx, request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		if err := validResponse.VisitDeleteItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItemById operation middleware
func (sh *strictHandler) GetItemById(w http.ResponseWriter, r *http.Request, id UUID) {
	var request GetItemByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemById(ctx, request.(GetItemByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemByIdResponseObject); ok {
		if err := validResponse.VisitGetItemByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateItem operation middleware
func (sh *strictHandler) UpdateItem(w http.ResponseWriter, r *http.Request, id UUID) {
	var request UpdateItemRequestObject

	request.Id = id

	var body UpdateItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateItem(ctx, request.(UpdateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateItemResponseObject); ok {
		if err := validResponse.VisitUpdateItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PingProtected operation middleware
func (sh *strictHandler) PingProtected(w http.ResponseWriter, r *http.Request) {
	var request PingProtectedRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PingProtected(ctx, request.(PingProtectedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PingProtected")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PingProtectedResponseObject); ok {
		if err := validResponse.VisitPingProtectedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
