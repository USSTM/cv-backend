// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	OAuth2Scopes     = "OAuth2.Scopes"
)

// Defines values for InviteUserRequestScope.
const (
	Global InviteUserRequestScope = "global"
	Group  InviteUserRequestScope = "group"
)

// Defines values for ItemType.
const (
	High   ItemType = "high"
	Low    ItemType = "low"
	Medium ItemType = "medium"
)

// Defines values for UserRole.
const (
	Admin      UserRole = "admin"
	Approver   UserRole = "approver"
	GroupAdmin UserRole = "group_admin"
	Member     UserRole = "member"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// GetItemByTypeResponse defines model for GetItemByTypeResponse.
type GetItemByTypeResponse = []ItemResponse

// GroupUser defines model for GroupUser.
type GroupUser struct {
	Email    openapi_types.Email `json:"email"`
	Id       UUID                `json:"id"`
	RoleName string              `json:"role_name"`
	Scope    string              `json:"scope"`
	ScopeId  *UUID               `json:"scope_id,omitempty"`
}

// InviteUserRequest defines model for InviteUserRequest.
type InviteUserRequest struct {
	Email    openapi_types.Email    `json:"email"`
	RoleName string                 `json:"role_name"`
	Scope    InviteUserRequestScope `json:"scope"`
	ScopeId  *UUID                  `json:"scope_id,omitempty"`
}

// InviteUserRequestScope defines model for InviteUserRequest.Scope.
type InviteUserRequestScope string

// InviteUserResponse defines model for InviteUserResponse.
type InviteUserResponse struct {
	Code *string `json:"code,omitempty"`
}

// ItemPostRequest defines model for ItemPostRequest.
type ItemPostRequest struct {
	Description *string   `json:"description,omitempty"`
	Id          UUID      `json:"id"`
	Name        string    `json:"name"`
	Stock       int       `json:"stock"`
	Type        ItemType  `json:"type"`
	Urls        *[]string `json:"urls,omitempty"`
}

// ItemResponse defines model for ItemResponse.
type ItemResponse struct {
	Description *string   `json:"description,omitempty"`
	Id          UUID      `json:"id"`
	Name        string    `json:"name"`
	Stock       int       `json:"stock"`
	Type        ItemType  `json:"type"`
	Urls        *[]string `json:"urls,omitempty"`
}

// ItemType defines model for ItemType.
type ItemType string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email openapi_types.Email `json:"email"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// PingResponse defines model for PingResponse.
type PingResponse struct {
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// User defines model for User.
type User struct {
	Email openapi_types.Email `json:"email"`
	Id    UUID                `json:"id"`
	Role  UserRole            `json:"role"`
}

// UserRole defines model for UserRole.
type UserRole string

// InviteUserJSONRequestBody defines body for InviteUser for application/json ContentType.
type InviteUserJSONRequestBody = InviteUserRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = ItemPostRequest

// PatchItemJSONRequestBody defines body for PatchItem for application/json ContentType.
type PatchItemJSONRequestBody = ItemResponse

// UpdateItemJSONRequestBody defines body for UpdateItem for application/json ContentType.
type UpdateItemJSONRequestBody = ItemPostRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Invite user (admin only)
	// (POST /admin/invite)
	InviteUser(w http.ResponseWriter, r *http.Request)
	// Get all users (admin only)
	// (GET /admin/users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// Get users by group
	// (GET /admin/users/group/{groupId})
	GetUsersByGroup(w http.ResponseWriter, r *http.Request, groupId UUID)
	// Login User
	// (POST /auth/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Get all items
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request)
	// Create an item
	// (POST /items)
	CreateItem(w http.ResponseWriter, r *http.Request)
	// Get items by type
	// (GET /items/type/{type})
	GetItemsByType(w http.ResponseWriter, r *http.Request, pType ItemType)
	// Delete item
	// (DELETE /items/{id})
	DeleteItem(w http.ResponseWriter, r *http.Request, id UUID)
	// Get item by ID
	// (GET /items/{id})
	GetItemById(w http.ResponseWriter, r *http.Request, id UUID)
	// Partially update item
	// (PATCH /items/{id})
	PatchItem(w http.ResponseWriter, r *http.Request, id UUID)
	// Update item
	// (PUT /items/{id})
	UpdateItem(w http.ResponseWriter, r *http.Request, id UUID)
	// Protected ping endpoint
	// (GET /ping)
	PingProtected(w http.ResponseWriter, r *http.Request)
	// Get user by email
	// (GET /users/email/{email})
	GetUserByEmail(w http.ResponseWriter, r *http.Request, email openapi_types.Email)
	// Get user by ID
	// (GET /users/{userId})
	GetUserById(w http.ResponseWriter, r *http.Request, userId UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Invite user (admin only)
// (POST /admin/invite)
func (_ Unimplemented) InviteUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users (admin only)
// (GET /admin/users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get users by group
// (GET /admin/users/group/{groupId})
func (_ Unimplemented) GetUsersByGroup(w http.ResponseWriter, r *http.Request, groupId UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Login User
// (POST /auth/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all items
// (GET /items)
func (_ Unimplemented) GetItems(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create an item
// (POST /items)
func (_ Unimplemented) CreateItem(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get items by type
// (GET /items/type/{type})
func (_ Unimplemented) GetItemsByType(w http.ResponseWriter, r *http.Request, pType ItemType) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete item
// (DELETE /items/{id})
func (_ Unimplemented) DeleteItem(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get item by ID
// (GET /items/{id})
func (_ Unimplemented) GetItemById(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Partially update item
// (PATCH /items/{id})
func (_ Unimplemented) PatchItem(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update item
// (PUT /items/{id})
func (_ Unimplemented) UpdateItem(w http.ResponseWriter, r *http.Request, id UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Protected ping endpoint
// (GET /ping)
func (_ Unimplemented) PingProtected(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by email
// (GET /users/email/{email})
func (_ Unimplemented) GetUserByEmail(w http.ResponseWriter, r *http.Request, email openapi_types.Email) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{userId})
func (_ Unimplemented) GetUserById(w http.ResponseWriter, r *http.Request, userId UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// InviteUser operation middleware
func (siw *ServerInterfaceWrapper) InviteUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_group_users"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InviteUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_users"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsersByGroup operation middleware
func (siw *ServerInterfaceWrapper) GetUsersByGroup(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "groupId", chi.URLParam(r, "groupId"), &groupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_group_users"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersByGroup(w, r, groupId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateItem operation middleware
func (siw *ServerInterfaceWrapper) CreateItem(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateItem(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemsByType operation middleware
func (siw *ServerInterfaceWrapper) GetItemsByType(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "type" -------------
	var pType ItemType

	err = runtime.BindStyledParameterWithOptions("simple", "type", chi.URLParam(r, "type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemsByType(w, r, pType)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteItem operation middleware
func (siw *ServerInterfaceWrapper) DeleteItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemById operation middleware
func (siw *ServerInterfaceWrapper) GetItemById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchItem operation middleware
func (siw *ServerInterfaceWrapper) PatchItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateItem operation middleware
func (siw *ServerInterfaceWrapper) UpdateItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_items"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateItem(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PingProtected operation middleware
func (siw *ServerInterfaceWrapper) PingProtected(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_own_data"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PingProtected(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserByEmail operation middleware
func (siw *ServerInterfaceWrapper) GetUserByEmail(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "email" -------------
	var email openapi_types.Email

	err = runtime.BindStyledParameterWithOptions("simple", "email", chi.URLParam(r, "email"), &email, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"manage_users"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByEmail(w, r, email)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	ctx = context.WithValue(ctx, OAuth2Scopes, []string{"view_own_data"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserById(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin/invite", wrapper.InviteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/users/group/{groupId}", wrapper.GetUsersByGroup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items", wrapper.GetItems)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/items", wrapper.CreateItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/type/{type}", wrapper.GetItemsByType)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/items/{id}", wrapper.DeleteItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/items/{id}", wrapper.GetItemById)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/items/{id}", wrapper.PatchItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/items/{id}", wrapper.UpdateItem)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.PingProtected)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/email/{email}", wrapper.GetUserByEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}", wrapper.GetUserById)
	})

	return r
}

type InviteUserRequestObject struct {
	Body *InviteUserJSONRequestBody
}

type InviteUserResponseObject interface {
	VisitInviteUserResponse(w http.ResponseWriter) error
}

type InviteUser201JSONResponse InviteUserResponse

func (response InviteUser201JSONResponse) VisitInviteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type InviteUser400JSONResponse Error

func (response InviteUser400JSONResponse) VisitInviteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type InviteUser401JSONResponse Error

func (response InviteUser401JSONResponse) VisitInviteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type InviteUser403JSONResponse Error

func (response InviteUser403JSONResponse) VisitInviteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type InviteUser404JSONResponse Error

func (response InviteUser404JSONResponse) VisitInviteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type InviteUser500JSONResponse Error

func (response InviteUser500JSONResponse) VisitInviteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []User

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers401JSONResponse Error

func (response GetUsers401JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers403JSONResponse Error

func (response GetUsers403JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse Error

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByGroupRequestObject struct {
	GroupId UUID `json:"groupId"`
}

type GetUsersByGroupResponseObject interface {
	VisitGetUsersByGroupResponse(w http.ResponseWriter) error
}

type GetUsersByGroup200JSONResponse []GroupUser

func (response GetUsersByGroup200JSONResponse) VisitGetUsersByGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByGroup401JSONResponse Error

func (response GetUsersByGroup401JSONResponse) VisitGetUsersByGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByGroup403JSONResponse Error

func (response GetUsersByGroup403JSONResponse) VisitGetUsersByGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByGroup404JSONResponse Error

func (response GetUsersByGroup404JSONResponse) VisitGetUsersByGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersByGroup500JSONResponse Error

func (response GetUsersByGroup500JSONResponse) VisitGetUsersByGroupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse LoginResponse

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser400JSONResponse Error

func (response LoginUser400JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser500JSONResponse Error

func (response LoginUser500JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsRequestObject struct {
}

type GetItemsResponseObject interface {
	VisitGetItemsResponse(w http.ResponseWriter) error
}

type GetItems200JSONResponse GetItemByTypeResponse

func (response GetItems200JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItems401JSONResponse Error

func (response GetItems401JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItems403JSONResponse Error

func (response GetItems403JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetItems500JSONResponse Error

func (response GetItems500JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateItemRequestObject struct {
	Body *CreateItemJSONRequestBody
}

type CreateItemResponseObject interface {
	VisitCreateItemResponse(w http.ResponseWriter) error
}

type CreateItem201JSONResponse ItemPostRequest

func (response CreateItem201JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem400JSONResponse Error

func (response CreateItem400JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem401JSONResponse Error

func (response CreateItem401JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem403JSONResponse Error

func (response CreateItem403JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem500JSONResponse Error

func (response CreateItem500JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByTypeRequestObject struct {
	Type ItemType `json:"type"`
}

type GetItemsByTypeResponseObject interface {
	VisitGetItemsByTypeResponse(w http.ResponseWriter) error
}

type GetItemsByType200JSONResponse GetItemByTypeResponse

func (response GetItemsByType200JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType401JSONResponse Error

func (response GetItemsByType401JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType403JSONResponse Error

func (response GetItemsByType403JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType404JSONResponse Error

func (response GetItemsByType404JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsByType500JSONResponse Error

func (response GetItemsByType500JSONResponse) VisitGetItemsByTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItemRequestObject struct {
	Id UUID `json:"id"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem401JSONResponse Error

func (response DeleteItem401JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem403JSONResponse Error

func (response DeleteItem403JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem404JSONResponse Error

func (response DeleteItem404JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem500JSONResponse Error

func (response DeleteItem500JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemByIdRequestObject struct {
	Id UUID `json:"id"`
}

type GetItemByIdResponseObject interface {
	VisitGetItemByIdResponse(w http.ResponseWriter) error
}

type GetItemById200JSONResponse ItemResponse

func (response GetItemById200JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById401JSONResponse Error

func (response GetItemById401JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById403JSONResponse Error

func (response GetItemById403JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById404JSONResponse Error

func (response GetItemById404JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemById500JSONResponse Error

func (response GetItemById500JSONResponse) VisitGetItemByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchItemRequestObject struct {
	Id   UUID `json:"id"`
	Body *PatchItemJSONRequestBody
}

type PatchItemResponseObject interface {
	VisitPatchItemResponse(w http.ResponseWriter) error
}

type PatchItem200JSONResponse ItemResponse

func (response PatchItem200JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem400JSONResponse Error

func (response PatchItem400JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem401JSONResponse Error

func (response PatchItem401JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem403JSONResponse Error

func (response PatchItem403JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem404JSONResponse Error

func (response PatchItem404JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem500JSONResponse Error

func (response PatchItem500JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItemRequestObject struct {
	Id   UUID `json:"id"`
	Body *UpdateItemJSONRequestBody
}

type UpdateItemResponseObject interface {
	VisitUpdateItemResponse(w http.ResponseWriter) error
}

type UpdateItem200JSONResponse ItemPostRequest

func (response UpdateItem200JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem400JSONResponse Error

func (response UpdateItem400JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem401JSONResponse Error

func (response UpdateItem401JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem403JSONResponse Error

func (response UpdateItem403JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem404JSONResponse Error

func (response UpdateItem404JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem500JSONResponse Error

func (response UpdateItem500JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PingProtectedRequestObject struct {
}

type PingProtectedResponseObject interface {
	VisitPingProtectedResponse(w http.ResponseWriter) error
}

type PingProtected200JSONResponse PingResponse

func (response PingProtected200JSONResponse) VisitPingProtectedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PingProtected401JSONResponse Error

func (response PingProtected401JSONResponse) VisitPingProtectedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PingProtected500JSONResponse Error

func (response PingProtected500JSONResponse) VisitPingProtectedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByEmailRequestObject struct {
	Email openapi_types.Email `json:"email"`
}

type GetUserByEmailResponseObject interface {
	VisitGetUserByEmailResponse(w http.ResponseWriter) error
}

type GetUserByEmail200JSONResponse User

func (response GetUserByEmail200JSONResponse) VisitGetUserByEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByEmail401JSONResponse Error

func (response GetUserByEmail401JSONResponse) VisitGetUserByEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByEmail403JSONResponse Error

func (response GetUserByEmail403JSONResponse) VisitGetUserByEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByEmail404JSONResponse Error

func (response GetUserByEmail404JSONResponse) VisitGetUserByEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByEmail500JSONResponse Error

func (response GetUserByEmail500JSONResponse) VisitGetUserByEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIdRequestObject struct {
	UserId UUID `json:"userId"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse User

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById401JSONResponse Error

func (response GetUserById401JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById403JSONResponse Error

func (response GetUserById403JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById404JSONResponse Error

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById500JSONResponse Error

func (response GetUserById500JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Invite user (admin only)
	// (POST /admin/invite)
	InviteUser(ctx context.Context, request InviteUserRequestObject) (InviteUserResponseObject, error)
	// Get all users (admin only)
	// (GET /admin/users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Get users by group
	// (GET /admin/users/group/{groupId})
	GetUsersByGroup(ctx context.Context, request GetUsersByGroupRequestObject) (GetUsersByGroupResponseObject, error)
	// Login User
	// (POST /auth/login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Get all items
	// (GET /items)
	GetItems(ctx context.Context, request GetItemsRequestObject) (GetItemsResponseObject, error)
	// Create an item
	// (POST /items)
	CreateItem(ctx context.Context, request CreateItemRequestObject) (CreateItemResponseObject, error)
	// Get items by type
	// (GET /items/type/{type})
	GetItemsByType(ctx context.Context, request GetItemsByTypeRequestObject) (GetItemsByTypeResponseObject, error)
	// Delete item
	// (DELETE /items/{id})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)
	// Get item by ID
	// (GET /items/{id})
	GetItemById(ctx context.Context, request GetItemByIdRequestObject) (GetItemByIdResponseObject, error)
	// Partially update item
	// (PATCH /items/{id})
	PatchItem(ctx context.Context, request PatchItemRequestObject) (PatchItemResponseObject, error)
	// Update item
	// (PUT /items/{id})
	UpdateItem(ctx context.Context, request UpdateItemRequestObject) (UpdateItemResponseObject, error)
	// Protected ping endpoint
	// (GET /ping)
	PingProtected(ctx context.Context, request PingProtectedRequestObject) (PingProtectedResponseObject, error)
	// Get user by email
	// (GET /users/email/{email})
	GetUserByEmail(ctx context.Context, request GetUserByEmailRequestObject) (GetUserByEmailResponseObject, error)
	// Get user by ID
	// (GET /users/{userId})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// InviteUser operation middleware
func (sh *strictHandler) InviteUser(w http.ResponseWriter, r *http.Request) {
	var request InviteUserRequestObject

	var body InviteUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.InviteUser(ctx, request.(InviteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InviteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(InviteUserResponseObject); ok {
		if err := validResponse.VisitInviteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	var request GetUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersByGroup operation middleware
func (sh *strictHandler) GetUsersByGroup(w http.ResponseWriter, r *http.Request, groupId UUID) {
	var request GetUsersByGroupRequestObject

	request.GroupId = groupId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersByGroup(ctx, request.(GetUsersByGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersByGroup")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersByGroupResponseObject); ok {
		if err := validResponse.VisitGetUsersByGroupResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItems operation middleware
func (sh *strictHandler) GetItems(w http.ResponseWriter, r *http.Request) {
	var request GetItemsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItems(ctx, request.(GetItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemsResponseObject); ok {
		if err := validResponse.VisitGetItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateItem operation middleware
func (sh *strictHandler) CreateItem(w http.ResponseWriter, r *http.Request) {
	var request CreateItemRequestObject

	var body CreateItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateItem(ctx, request.(CreateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateItemResponseObject); ok {
		if err := validResponse.VisitCreateItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItemsByType operation middleware
func (sh *strictHandler) GetItemsByType(w http.ResponseWriter, r *http.Request, pType ItemType) {
	var request GetItemsByTypeRequestObject

	request.Type = pType

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemsByType(ctx, request.(GetItemsByTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemsByType")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemsByTypeResponseObject); ok {
		if err := validResponse.VisitGetItemsByTypeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(w http.ResponseWriter, r *http.Request, id UUID) {
	var request DeleteItemRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx, request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		if err := validResponse.VisitDeleteItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItemById operation middleware
func (sh *strictHandler) GetItemById(w http.ResponseWriter, r *http.Request, id UUID) {
	var request GetItemByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemById(ctx, request.(GetItemByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemByIdResponseObject); ok {
		if err := validResponse.VisitGetItemByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchItem operation middleware
func (sh *strictHandler) PatchItem(w http.ResponseWriter, r *http.Request, id UUID) {
	var request PatchItemRequestObject

	request.Id = id

	var body PatchItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchItem(ctx, request.(PatchItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchItemResponseObject); ok {
		if err := validResponse.VisitPatchItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateItem operation middleware
func (sh *strictHandler) UpdateItem(w http.ResponseWriter, r *http.Request, id UUID) {
	var request UpdateItemRequestObject

	request.Id = id

	var body UpdateItemJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateItem(ctx, request.(UpdateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateItem")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateItemResponseObject); ok {
		if err := validResponse.VisitUpdateItemResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PingProtected operation middleware
func (sh *strictHandler) PingProtected(w http.ResponseWriter, r *http.Request) {
	var request PingProtectedRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PingProtected(ctx, request.(PingProtectedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PingProtected")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PingProtectedResponseObject); ok {
		if err := validResponse.VisitPingProtectedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserByEmail operation middleware
func (sh *strictHandler) GetUserByEmail(w http.ResponseWriter, r *http.Request, email openapi_types.Email) {
	var request GetUserByEmailRequestObject

	request.Email = email

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserByEmail(ctx, request.(GetUserByEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserByEmail")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByEmailResponseObject); ok {
		if err := validResponse.VisitGetUserByEmailResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(w http.ResponseWriter, r *http.Request, userId UUID) {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx, request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
